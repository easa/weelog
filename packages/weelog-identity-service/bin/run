#!/usr/bin/env node

/**
 * Module dependencies.
 */
const cluster = require('cluster')
const os = require('os')
var http = require('http')

const logger = {
  info: console.log,
  fetal: console.log
}

const numCPUs = os.cpus().length

if (cluster.isMaster) {
  logger.info(`Master pid=${process.pid} is running`)
  for (let i = 0; i < numCPUs; i += 1) {
    // cluster.fork()
  }
  cluster.on('exit', (worker) => {
    logger.fatal(`Worker ${worker.process.pid} just died`)
    cluster.fork()
  })
} else {
  db.connect(config.database.dsn)
    .then(() => {
      logger.info('Connected to MongoDB')
      server.listen(0)
    })
    .catch((err) => {
      logger.fatal(err)
    })
}

/**
 * Create HTTP server and listen on the provided port
 */

const app = function (req, res) {
  logger.info(`${req['method']} ${req['url']} ${req.headers['user-agent']}`)
  res.writeHead(200, { 'Content-Type': 'text/html' })
  var txt = `Identity service is running`
  res.end(txt)
}

const server = http.createServer(app).listen(0)

server.on('listening', () => {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`
  logger.info(`Listening on ${bind}`)
})

// Handle server errors
server.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.fatal(`${bind} requires elevated privileges`)
      process.exit(1)
      break
    case 'EADDRINUSE':
      logger.fatal(`${bind} is already in use`)
      process.exit(1)
      break
    default:
      logger.info(error)
    // throw error
  }
})
