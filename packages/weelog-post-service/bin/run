#!/usr/bin/env node

const http = require('http')
const axios = require('axios')
const { name, version, serviceRegistryURL, serviceTimeout, log } = require('../config')[process.env.NODE_ENV || 'development']
const logger = log()
const service = require('../server/service')//(config)
const server = http.createServer(service)

server.listen(0) // 0 means randomly select a free port
const instance = axios.create({
  baseURL: serviceRegistryURL,
  headers: { 'Some-Auth-Header': 'token' }
});

server.on('listening', () => {

  const regsiterService = () => {
    instance.put(`/register/${name}/${version}/${server.address().port}`)
      .then(r => console.log(r.data))
      .catch(r => console.log(r ? r.message ? r.message : r : ''))
  }
  const unregsiterService = () => {
    instance.delete(`/unregister/${name}/${version}/${server.address().port}`)
      .then(r => console.log(r.data))
      .catch(r => console.log(r ? r.message ? r.message : r : ''))
  }
  regsiterService()
  const interval = setInterval(regsiterService, serviceTimeout * 1000)
  const cleanup = async () => { clearInterval(interval); await unregsiterService() }

  process.on('uncaughtException', async () => {
    await exitPlan('uncaughtException')
  })
  process.on('SIGINT', async () => {
    await exitPlan('SIGINT')
  })
  process.on('SIGTERM', async () => {
    await exitPlan('SIGTERM')
  })

  logger.info(`\nService is listening on port ${server.address().port} in`)// ${server.get('env')} mode`)

  async function exitPlan() {
    await cleanup()
    console.log(`quited ${arguments ? Object.keys(arguments).map(i => arguments[i]) : 'on exception'}`)
    process.exit(1)
  }
})
